
                        Munge Payload
SECRET//NOFORN
Munge Payload
 
Description:
The Munge Payload utility is designed to help automate some of the steps in obfuscating or encrypting embedded payloads.Specifically, Munge Payload is currently capable of supporting the Melomy style of embedding/trojaning. The utility will read in a payload, modify it (or won't) with the specified parameters, and generate a formatted header file with an array containing the payload. The currently supported modifications to the payload are: None, XOR Rolling XOR (RXOR), Compression (ZLIB), AESAdvanced Encryption Standard Encryption, Public/Private Key Encryption, or a combination of these. Currently, the utility will overwrite the header file you specify if it already exists. The tool also generates the deobfuscation/decryption code needed to repair the payload during execution. The order of manipulation if all options are specified is: Compression, XOR, Rolling XOR, AESAdvanced Encryption Standard Encrypt (MSFT_AES_256), Public/Private Encrypt (MSFT_RSA_4096). If you wish to randomize the keys being used (for XOR , RXOR, AES, and Public/Private), you can replace the following argument with the keyword 'gen'. For example, if I want a random key for my XOR, I simply change -x 23 to -x gen. 
 
AES Key FIle Generation: Create a text file -> Open in WinHex -> Resize to 32 bytes -> Edit -> Fill FIle -> Cryptographically secure data
**Note**: When using the gen keyword, the created key is stored in the current directory with the name MungePayloadAESKey.key
 
RSA (Pub/Priv) Key File Generation: Use KeyGenerator.exe (see repository MungePayload folder) -> Generates privateKey.pem and publicKey.pem
**Note**: When using the gen keyword, the created key pair is stored in the current directory with the file names MungePayloadPubKey.pem and MungePayloadPrivKey.pem.
 
Files generated by Munge Payload:

MungePayloadUnscram.txt - Dropped in current directory. Contains unscramble source to de-obfuscate the payload.
Payload.munge - The obfuscated copy of the payload is dropped in the current directory.
Header file - Replaced in place or creates in at the location specified.
MungePayloadAESKey.key - Generated when the gen keyword is used to produce a random AESAdvanced Encryption Standard key.
MungePayloadPubKey.pem and MungePayloadPrivKey.pem - Generated when the gen keyword is used for Public\Private key encryption.

 
Random Generation:
 

XOR: Uses srand() and rand() to generate a random byte between 5-255. This bytes is used as the key for the XOR. Note, the unscram will not change when using the gen keyword (user-supplied key will cause the source to change when the supplied key changes).
RXOR: Uses srand() and rand() to generate a random byte between 5-255. This bytes is used as the key for the RXOR. Note, the unscram will not change when using the gen keyword (user-supplied key will cause the source to change when the supplied key changes).
AES: Using srand() and rand() the 32-byte keys are randomly generated. The randomly generated key is written to the file MungePayloadAESKey.key. The key is XOR'd with a randomly generated byte between 5-255. Note, the unscram source does not change between Munges for AESAdvanced Encryption Standard encryption.
Public\Private: Using SecureBuffer, the keys are randomly generated, the private key is then embedded in the header file. The key is XOR'd with a randomly generated byte between 5-255. Note, the unscram source does not change between Munges for Public\Private key encryption.

Design:

Examples:
 
Usage:
('section' missing)
 
No Obfuscation:
('section' missing)
 
XOR:
('section' missing)
 
XOR Randomly Generated Key:
('section' missing)
 
RXOR:
('section' missing)
 
RXOR Randomly Generated Key:
('section' missing)
 
Compression:
('section' missing)
AES:
('section' missing)
 
AES Randomly Generated Key:
('section' missing)
 
RSA (Pub/Priv):
('section' missing)
 
RSA Randomly Generated Keys:
('section' missing)
 
Combo - Compress, XOR, AES:
('section' missing)
 
Combo - All (just for fun):
('section' missing)
 
Combo All Randomly Generated Keys (Just For More Fun)
('section' missing)
 
Appended To Header
('section' missing)
Stash Repository:   Munge Payload Repository

 
Change Log:

('excerpt' missing)  
SECRET//NOFORN
 
 

Comments:


2015-05-13 18:27 
[User #4849738]: 

damn that's some sexy documentation 




Attachments:


image2015-5-12 14:29:40.png


image2015-5-12 14:28:53.png


image2015-5-12 14:22:17.png


image2015-5-12 14:21:45.png


image2015-5-12 14:19:8.png


image2015-5-12 14:18:41.png


image2015-5-12 14:17:46.png


image2015-5-12 14:17:18.png


image2015-5-12 14:15:20.png


image2015-5-12 14:13:54.png


image2015-5-12 14:13:1.png


image2015-5-12 14:12:13.png


image2015-5-12 14:9:58.png


image2015-4-27 10:42:33.png


image2015-4-27 10:40:53.png


image2015-4-27 10:38:22.png


image2015-4-27 10:37:49.png


image2015-4-27 10:35:54.png


image2015-4-27 10:32:29.png


image2015-4-27 10:28:57.png


image2015-4-27 10:25:9.png


image2015-4-27 10:22:2.png


image2015-4-27 10:21:25.png


image2015-4-27 10:17:3.png


image2015-4-27 10:16:18.png


image2015-4-27 10:13:50.png


image2015-4-27 10:13:23.png


image2015-4-27 10:3:31.png


image2015-4-27 10:2:12.png


image2015-4-27 9:57:58.png


image2015-4-27 9:47:21.png


image2015-4-24 14:40:36.png


image2015-4-24 14:38:16.png



Previous versions:
| 1 SECRET
| 2 SECRET
| 3 SECRET
| 4 SECRET
| 5 SECRET
| 6 SECRET
| 7 SECRET
| 8 SECRET
| 9 SECRET
| 10 SECRET
| 11 SECRET
| 12 SECRET
| 13 SECRET
| 14 SECRET
| 15 SECRET
| 16 SECRET
| 17 SECRET
| 18 SECRET
| 19 SECRET
| 20 SECRET
| 21 SECRET
| 22 SECRET
| 23 SECRET
| 24 SECRET
| 25 SECRET
|
                    